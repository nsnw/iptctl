#!/bin/bash

#------------------------------------------------------------------------------
# iptctl v1.0
# iptables/ip6tables controller
# (c)2012 Andy Smith <andy@m0vkg.org.uk>
#------------------------------------------------------------------------------
# LICENSE
#
# This script is released under the terms of the 'BSD 3-Clause License', a copy
# of which can be found at http://opensource.org/licenses/BSD-3-Clause
#------------------------------------------------------------------------------
# USAGE
#
# iptctl can be invoked in a number of ways:-
#  * Directly, as 'iptctl', with the options found by running 'iptctl -h'
#  * As an init script, for example '/etc/init.d/iptables start'
#  * As an rc script, for example '/etc/rc2.d/S99iptables'
#
# To use the second and third methods, just create a symlink to where iptctl
# is installed from the /etc/init.d or one of the /etc/rcN.d directories.
# This will only work if the symlink name matches one of the following:-
#  * /etc/init.d/iptables
#  * /etc/init.d/ip6tables
#  * /etc/rcN.d/SNNiptables
#  * /etc/rcN.d/KNNiptables
#  * /etc/rcN.d/SNNip6tables
#  * /etc/rcN.d/KNNip6tables
# ...where N is a digit.
#
# If 'ip6tables' is used in the symlink name, '-6' is assumed. For symlinks in
# /etc/rcN.d, no options are allowed (or supported, at least), and 'start' or
# 'stop' is implied depending whether SNNiptables or KNNiptables is used.
#------------------------------------------------------------------------------

# Version
VERSION="1.0"

# Location of rules
RULES_DIR="/etc/netfilter"

# Set options for echo
ECHO="/bin/echo -e"

# Debug function (called when -d is specified)
debug() {
  if [[ ${DEBUG} = 1 ]]; then
    ${ECHO} "\033[32;1mDEBUG:\033[0m $1"
  fi
}

# Set debug and dryrun to 0 by default
if [[ ${DEBUG} = 1 ]]; then
  DEBUG=1
else
  DEBUG=0
fi
DRYRUN=0
RC=0

# Function to set the IP version we're working with
function set_ver() {
  VER=$1
  if [[ ${VER} = "6" ]]; then
    debug "IPv6 specified."
    IPVER=6
    IPTABLES_NAME=ip6tables
    RULES=rules6.conf
  else
    debug "IPv4 specified."
    IPVER=4
    IPTABLES_NAME=iptables
    RULES=rules.conf
  fi
}

# Default to 'filter' table
TABLE="filter"

function show_help() {
  ${ECHO} "$0 ${VERSION}"
  ${ECHO} "iptables/ip6tables controller"
  ${ECHO} "(c)2012 Andy Smith <andy@m0vkg.org.uk>"
  ${ECHO} ""
  ${ECHO} "OPTIONS"
  ${ECHO} "  -4|-6                             IPv4/IPv6 mode"
  ${ECHO} "  -d                                Turn on debug message"
  ${ECHO} "  -f                                Turn on dry-run mode"
  ${ECHO} "  -t <table>                        Table name (defaults to 'filter')"
  ${ECHO} ""
  ${ECHO} "COMMANDS"
  ${ECHO} "  -r                                Restore (load) rules"
  ${ECHO} "  -s                                Save rules"
  ${ECHO} "  -e                                Edit rules"
  ${ECHO} "  -x                                Delete all rules"
  ${ECHO} "  -l                                List rules and their counters"
  ${ECHO} "  -p                                Dump rules to screen"
  ${ECHO} "  -c                                Clear counters"
  ${ECHO} ""
  exit
}

# Pull out options from the commandline
while getopts "hdf46rseplcxt:" OPT
do
  if [[ ${OPT} = "d" ]]; then
    DEBUG=1
    debug "Debugging turned on."
  fi
  if [[ ${OPT} = "h" ]]; then
    show_help
  fi
  if [[ ${OPT} = "f" ]]; then
    DRYRUN=1
    debug "Dry run specified."
  fi
  if [[ ${OPT} = "4" ]]; then
    set_ver 4
  fi
  if [[ ${OPT} = "6" ]]; then
    set_ver 6
  fi
  if [[ ${OPT} = "r" ]]; then
    debug "Restore specified."
    CMD="restore"
  fi
  if [[ ${OPT} = "s" ]]; then
    debug "Save specified."
    CMD="save"
  fi
  if [[ ${OPT} = "e" ]]; then
    debug "Edit specified."
    CMD="edit"
  fi
  if [[ ${OPT} = "p" ]]; then
    debug "Print specified."
    CMD="print_rules"
  fi
  if [[ ${OPT} = "l" ]]; then
    debug "List specified."
    CMD="list_rules"
  fi
  if [[ ${OPT} = "c" ]]; then
    debug "Clear counters specified."
    CMD="clear_counters"
  fi
  if [[ ${OPT} = "t" ]]; then
    debug "Table specified (\033[33;1m${OPTARG}\033[0m)"
    TABLE="${OPTARG}"
  fi
  if [[ ${OPT} = "x" ]]; then
    debug "Clear rules specified."
    CMD="clear_rules"
  fi
done

# rc-script compatability
if [[ $0 = "/etc/init.d/iptables" ]] || [[ $0 = "/etc/init.d/ip6tables" ]]; then
  debug "Called as \033[33;1m$0\033[0m."
  if [[ $0 = "/etc/init.d/ip6tables" ]]; then
    set_ver 6
  fi
  case $1 in
    start|reload)
      CMD="restore"
      ;;
    stop)
      CMD="clear_rules"
      ;;
    save)
      CMD="save"
      ;;
    *)
      echo "Usage: $0 (start|reload|stop|save)"
      exit 1
      ;;
  esac
elif [[ $0 =~ /etc/rc[0-9].d/S[0-9][0-9]iptables ]] || [[ $0 =~ /etc/rc[0-9].d/S[0-9][0-9]ip6tables ]]; then
  if [[ $0 =~ ip6tables ]]; then
    set_ver 6
  fi
  debug "Called as \033[33;1m$0\033[0m."
  CMD="restore"
elif [[ $0 =~ /etc/rc[0-9].d/K[0-9][0-9]iptables ]] || [[ $0 =~ /etc/rc[0-9].d/K[0-9][0-9]ip6tables ]]; then
  if [[ $0 =~ ip6tables ]]; then
    set_ver 6
  fi
  debug "Called as \033[33;1m$0\033[0m."
  CMD="clear_rules"
  exit 1
fi

# If no options have been given at all, then you're going home with nothing
if [ -z ${CMD} ]; then
  ${ECHO} "No command given - try -h for help."
  exit 1
fi

# If neither -4 or -6 have been specified, assume IPv4
if [[ -z ${IPVER} ]]; then
  set_ver 4
fi

# Get the editor from the environment
if [[ ! -z ${EDITOR} ]]; then
  debug "EDITOR found, is \033[33;1m${EDITOR}\033[0m."
else
  debug "EDITOR not found, setting to \033[33;1m/usr/bin/vi\033[0m."
  EDITOR="/usr/bin/vi"
fi

# Commands called for iptables
IPTABLES="/sbin/${IPTABLES_NAME}"
IPTABLES_SAVE="/sbin/${IPTABLES_NAME}-save"
IPTABLES_RESTORE="/sbin/${IPTABLES_NAME}-restore"

# Function to call external programs
function run_cmd() {

  CMD_TO_RUN=$1

  # If dryrun is 0 (as by default), then do as we're told
  if [[ ${DRYRUN} = 0 ]]; then
    debug "\033[31;1mrun_cmd\033[0m: \033[36;1m${CMD_TO_RUN}\033[0m"
    eval ${CMD_TO_RUN}
  else
    debug "\033[35;1mdry_run_cmd\033[0m: \033[36;1m${CMD_TO_RUN}\033[0m"
  fi 
}

# Restore (load) rules
function restore() {

  debug "Checking for existing rules in \033[33;1m${RULES_DIR}/${RULES}\033[0m..."
  if [ -f ${RULES_DIR}/${RULES} ]; then
    IPTABLES_CMD="${IPTABLES_RESTORE} -c <${RULES_DIR}/${RULES}"
    debug "Calling \033[33;1m${IPTABLES_CMD}\033[0m to load rules..."
    run_cmd "${IPTABLES_CMD}"
    if [[ $? = 0 ]]; then
      debug "Rules successfully loaded."
    else
      RC=$?
      debug "Could not load rules - \033[33;1m${IPTABLES_RESTORE}\033[0m exited with value \033[33;1m${RC}\033[0m."
    fi
  else
    debug "No rules found in \033[33;1m${RULES_DIR}/${RULES}^[[0m."
    ${ECHO} "No rules found in \033[33;1m${RULES_DIR}/${RULES}^[[0m."
  fi
}

# Save rules
function save() {

  debug "Checking for the existence of the rules directory..."
  if [ -d ${RULES_DIR} ]; then
    IPTABLES_CMD="${IPTABLES_SAVE} -c >${RULES_DIR}/${RULES}"
    debug "Backing up existing rules to \033[33;1m${RULES_DIR}/${RULES}\033[0m..."
    if [[ -f ${RULES_DIR}/${RULES} ]]; then
      debug "\033[33;1m${RULES_DIR}/${RULES}\033[0m found."
      run_cmd "cp ${RULES_DIR}/${RULES} ${RULES_DIR}/${RULES}.bak"
    else
      debug "\033[33;1m${RULES_DIR}/${RULES}\033[0m not found, so not making a backing."
    fi
    debug "Calling \033[33;1m${IPTABLES_CMD}\033[0m to save rules..."
    run_cmd "${IPTABLES_CMD}"
    if [[ $? = 0 ]]; then
      debug "Rules successfully saved."
    else
      RC=$?
      debug "Could not save rules - \033[33;1m${IPTABLES_SAVE}\033[0m exited with value \033[33;1m${RC}\033[0m."
    fi
  else
    debug "\033[33;1m${RULES_DIR}\033[0m does not exist!"
    ${ECHO} "\033[33;1m${RULES_DIR}\033[0m does not exist!"
    RC=1
  fi
}

# Edit rules
# Calls save() first to try to preserve packet counts as much as possible, and to
# account for any rules that have been added manually since the last save. Once
# saved, calls restore() to load the new rules.
function edit() {

  debug "Calling \033[33;1msave()\033[0m..."
  save
  if [[ ${RC} = 0 ]]; then
    debug "Calling \033[33;1m${EDITOR}\033[0m to edit \033[33;1m${RULES_DIR}/${RULES}\033[0m..."
    run_cmd "${EDITOR} ${RULES_DIR}/${RULES}"
    debug "Calling \033[33;1mrestore()\033[0m..."
    restore
  else
    debug "Could not save rules to \033[33;1m${RULES_DIR}/${RULES}\033[0m."
  fi
}

# Dump out the rules as they are in the rules file.
function print_rules() {

  IPTABLES_CMD="${IPTABLES} -t ${TABLE} -S"
  debug "Printing list of rules with \033[33;1m${IPTABLES_CMD}\033[0m..."
  run_cmd "${IPTABLES_CMD}"
}

# Formatted output of the rules (iptables --line-numbers -vnL)
function list_rules() {
  IPTABLES_CMD="${IPTABLES} -t ${TABLE} --line-numbers -vnL"
  debug "Listing rules with \033[33;1m${IPTABLES_CMD}\033[0m..."
  run_cmd "${IPTABLES_CMD}"
}

# Clear counters on all rules in the current table
function clear_counters() {
  IPTABLES_CMD="${IPTABLES} -t ${TABLE} -Z"
  debug "Clearing counters with \033[33;1m${IPTABLES_CMD}\033[0m..."
  run_cmd "${IPTABLES_CMD}"
}

# Clear all rules
function clear_rules() {
  if [[ ${IPVER} = "6" ]]; then
    TABLE_NAMES="`cat /proc/net/ip6_tables_names`"
  else
    TABLE_NAMES="`cat /proc/net/ip_tables_names`"
  fi

  debug "Tables are: \033[33;1m${TABLE_NAMES}\033[0m."
  for TABLE_NAME in ${TABLE_NAMES}; do
    debug "Clearing table \033[33;1m${TABLE_NAME}\033[0m..."
    BUILTIN_CHAINS="`${IPTABLES} -t ${TABLE_NAME} -nL | grep \"^Chain\" | grep -v \"references\" | cut -f2 -d\" \"`"
    for BUILTIN_CHAIN in ${BUILTIN_CHAINS}; do
      debug "Setting policy on built-in chain \033[33;1m${BUILTIN_CHAIN}\033[0m to \033[33;1mACCEPT\033[0m and flushing..."
      run_cmd "${IPTABLES} -t ${TABLE_NAME} -P ${BUILTIN_CHAIN} ACCEPT"
      run_cmd "${IPTABLES} -t ${TABLE_NAME} -F ${BUILTIN_CHAIN}"
    done
    USER_CHAINS="`${IPTABLES} -t ${TABLE_NAME} -nL | grep \"^Chain\" | grep \"references\" | cut -f2 -d\" \"`"
    for USER_CHAIN in ${USER_CHAINS}; do
      debug "Clearing user chain \033[33;1m${USER_CHAIN}\033[0m..."
      run_cmd "${IPTABLES} -t ${TABLE_NAME} -F ${USER_CHAIN}"
    done
    for USER_CHAIN in ${USER_CHAINS}; do
      debug "Deleting user chain \033[33;1m${USER_CHAIN}\033[0m..."
      run_cmd "${IPTABLES} -t ${TABLE_NAME} -X ${USER_CHAIN}"
    done
  done
}
    
# Main bit of logic
case ${CMD} in
  restore)
    restore
    if [[ $? = 0 ]]; then
      ${ECHO} "Rules loaded from \033[32;1m${RULES_DIR}/${RULES}\033[0m."
    else
      ${ECHO} "Error loading rules from \033[32;1m${RULES_DIR}/${RULES}\033[0m."
    fi
    ;;
  save)
    save
    if [[ $? = 0 ]]; then
      ${ECHO} "Rules saved to \033[32;1m${RULES_DIR}/${RULES}\033[0m."
    else
      ${ECHO} "Error saving rules to \033[32;1m${RULES_DIR}/${RULES}\033[0m."
    fi
    ;;
  edit)
    edit
    ;;
  print_rules)
    print_rules
    ;;
  list_rules)
    list_rules
    ;;
  clear_counters)
    clear_counters
    ;;
  clear_rules)
    clear_rules
    if [[ $? = 0 ]]; then
      ${ECHO} "Rules cleared."
      clear_counters
    else
      ${ECHO} "Error clearing rules."
    fi
    ;;
esac
